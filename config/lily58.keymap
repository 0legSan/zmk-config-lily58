/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <51 24>;
            bindings = <&lt 2 SPACE>;
        };

        screen {
            bindings = <&kp LC(LG(EQUAL))>;
            key-positions = <24 1>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESCAPE        &mt LG(LA(EQUAL)) TILDE  &kp F5  &kp F1                    &kp F2       &kp F3                                                  &kp F10          &kp F11    &kp F12                   &kp F7   &kp F8    &kp F9
&kp CLCK          &kp Q                    &kp W   &kp E                     &kp R        &kp T                                                   &kp Y            &kp U      &kp I                     &kp O    &kp P     &mt RIGHT_BRACKET LEFT_BRACKET
&kp LEFT_SHIFT    &kp A                    &kp S   &kp D                     &kp F        &kp G                                                   &kp H            &kp J      &kp K                     &kp L    &kp SEMI  &kp SQT
&kp LEFT_CONTROL  &kp Z                    &kp X   &kp C                     &kp V        &kp B         &kp BACKSPACE         &kp BACKSPACE       &kp N            &kp M      &kp COMMA                 &kp DOT  &kp FSLH  &kp BACKSLASH
                                                   &kp LS(LA(LC(LEFT_WIN)))  &lt 1 SPACE  &kp LEFT_ALT  &mt LEFT_GUI SPACE    &mt LEFT_WIN SPACE  &lt 1 RIGHT_ALT  &kp ENTER  &kp LS(LA(LC(LEFT_WIN)))
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp ESCAPE  &none  &none  &none                   &none                    &none                                      &kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3      &kp NUMBER_4      &kp NUMBER_5  &kp KP_PLUS
&kp CAPS    &none  &none  &kp LA(LG(LEFT_ARROW))  &kp LA(LG(RIGHT_ARROW))  &none                                      &kp NUMBER_6  &kp NUMBER_7   &kp NUMBER_8      &kp N9            &kp NUMBER_0  &kp KP_SUBTRACT
&kp LSHFT   &none  &none  &none                   &none                    &none                                      &kp UP        &kp LEFT       &kp RIGHT         &kp LPAR          &kp RPAR      &kp LEFT_SHIFT
&kp LCTRL   &none  &none  &kp RC(LEFT_ARROW)      &kp LC(RIGHT_ARROW)      &none  &kp LA(LS(EQUAL))    &kp LA(EQUAL)  &kp DOWN      &kp AT_SIGN    &kp LS(NUMBER_6)  &kp LS(NUMBER_7)  &kp RBRC      &kp PIPE
                          &kp BACKSPACE           &mo 1                    &none  &kp SPACE            &kp EQUAL      &mo 1         &kp SEMICOLON  &kp COLON
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        layer_2 {
            bindings = <
&bt BT_CLR  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0                    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans                          &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans                          &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans
            >;
        };
    };
};
