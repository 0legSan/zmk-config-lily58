/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <17 16>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESCAPE                     &mt LG(LA(EQUAL)) TILDE  &kp F5  &kp F1        &kp F2        &kp F3                                        &kp F10  &kp F11               &kp F12    &kp F7   &kp F8    &kp F9
&mt LS(LA(LC(LEFT_WIN))) CLCK  &kp Q                    &kp W   &kp E         &kp R         &kp T                                         &kp Y    &kp U                 &kp I      &kp O    &kp P     &mt RIGHT_BRACKET LEFT_BRACKET
&kp LEFT_SHIFT                 &kp A                    &kp S   &kp D         &kp F         &kp G                                         &kp H    &lt 3 J               &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_CONTROL               &kp Z                    &kp X   &kp C         &kp V         &kp B             &kp CAPS     &kp BACKSPACE  &kp N    &kp M                 &kp COMMA  &kp DOT  &kp FSLH  &kp BACKSLASH
                                                                &kp LEFT_ALT  &kp LEFT_WIN  &kp LA(LEFT_WIN)  &kp SPACE    &kp SPACE      &mo 1    &kp LS(LA(LC(LCMD)))  &kp RET
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Number {
            bindings = <
&trans  &none          &none      &none          &none         &none                             &mt ASTRK PLUS       &kp NUMBER_1          &kp NUMBER_2           &kp NUMBER_3       &kp NUMBER_4     &kp N5
&trans  &none          &none      &none          &none         &none                             &mt KP_DIVIDE MINUS  &kp NUMBER_6          &kp N7                 &kp N8             &kp KP_NUMBER_9  &kp KP_NUMBER_0
&trans  &kp AMPERSAND  &kp POUND  &kp KP_DIVIDE  &kp ASTERISK  &kp PERCENT                       &kp F14              &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES  &none            &none
&trans  &none          &none      &none          &none         &none        &trans    &trans     &kp LA(F15)          &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SQT            &none            &none
                                  &trans         &trans        &trans       &trans    &kp EQUAL  &mo 1                &none                 &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Arrow {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans        &trans          &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans        &trans          &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &kp UP_ARROW  &kp LEFT_ARROW  &kp RIGHT  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp DOWN      &trans          &trans     &trans  &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans        &mo 2           &trans
            >;
        };

        dot {
            bindings = <
&none  &none  &none  &none  &none  &none                     &none    &none          &none      &none  &none  &none
&none  &none  &none  &none  &none  &none                     &none    &none          &none      &none  &none  &none
&none  &none  &none  &none  &none  &none                     &none    &none          &kp F18    &none  &none  &kp F20
&none  &none  &none  &none  &none  &none  &none    &kp PIPE  &none    &none          &none      &none  &none  &kp F19
                     &none  &none  &none  &none    &kp F16   &kp F17  &kp LS(SLASH)  &kp SLASH
            >;
        };
    };
};
