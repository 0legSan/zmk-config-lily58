/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Layer-dot {
            bindings = <&lt 3 COLON>;
            key-positions = <31 32>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESCAPE                    &mt LG(LA(EQUAL)) TILDE  &kp F5  &kp F1        &kp F2        &kp F3                                        &kp F10          &kp F11                   &kp F12                   &kp F7   &kp F8    &kp F9
&mt LS(LA(LC(LEFT_WIN))) TAB  &kp Q                    &kp W   &kp E         &kp R         &kp T                                         &kp Y            &kp U                     &kp I                     &kp O    &kp P     &mt RIGHT_BRACKET LEFT_BRACKET
&kp LEFT_SHIFT                &kp A                    &kp S   &kp D         &kp F         &kp G                                         &kp H            &kp J                     &kp K                     &kp L    &kp SEMI  &kp SQT
&kp LEFT_CONTROL              &kp Z                    &kp X   &kp C         &kp V         &kp B             &kp CAPS     &kp BACKSPACE  &kp N            &kp M                     &kp COMMA                 &kp DOT  &kp FSLH  &kp BACKSLASH
                                                               &kp LEFT_ALT  &kp LEFT_WIN  &kp LA(LEFT_WIN)  &kp SPACE    &mt SPACE RET  &lt 2 RIGHT_ALT  &kp LS(LA(LC(LEFT_WIN)))  &kp LS(LA(LC(LEFT_WIN)))
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans       &trans       &trans                                   &trans  &trans          &trans          &trans     &trans  &trans
&trans  &trans  &trans  &trans       &trans       &trans                                   &trans  &trans          &kp UP_ARROW    &trans     &trans  &trans
&trans  &trans  &trans  &trans       &trans       &trans                                   &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans       &trans       &trans       &trans         &key_repeat  &trans  &trans          &trans          &trans     &trans  &trans
                        &key_repeat  &key_repeat  &key_repeat  &key_repeat    &key_repeat  &trans  &trans          &trans
            >;
        };

        Number {
            bindings = <
&key_repeat  &none  &kp LS(LC(NUMBER_1))  &kp LS(LG(MINUS))  &kp LS(LG(N0))  &kp LG(LS(EQUAL))                                &mt ASTRK PLUS       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4     &kp N5
&key_repeat  &none  &none                 &none              &none           &none                                            &mt KP_DIVIDE MINUS  &kp NUMBER_6  &kp N7        &kp N8        &kp KP_NUMBER_9  &kp KP_NUMBER_0
&key_repeat  &none  &none                 &kp LC(LEFT)       &kp LC(RIGHT)   &none                                            &none                &none         &none         &none         &none            &none
&key_repeat  &none  &none                 &none              &none           &none              &key_repeat    &kp BACKSPACE  &none                &none         &none         &none         &none            &none
                                          &key_repeat        &key_repeat     &key_repeat        &kp SPACE      &kp EQUAL      &mo 2                &none         &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        dot {
            bindings = <
&none  &none  &none  &none  &none  &none                       &none         &none          &none      &none   &none  &none
&none  &none  &none  &none  &none  &none                       &none         &none          &none      &none   &none  &none
&none  &none  &none  &none  &none  &none                       &none         &none          &none      &kp AT  &none  &kp COLON
&none  &none  &none  &none  &none  &none  &none    &kp PIPE    &none         &none          &none      &none   &none  &kp SEMI
                     &none  &none  &none  &none    &kp KP_DOT  &kp KP_COMMA  &kp LS(SLASH)  &kp SLASH
            >;
        };

        Number {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&key_repeat  &none  &kp LS(LC(NUMBER_1))  &kp LS(LG(MINUS))  &kp LS(LG(N0))  &kp LG(LS(EQUAL))                                &mt ASTRK PLUS       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4     &kp N5
&key_repeat  &none  &none                 &none              &none           &none                                            &mt KP_DIVIDE MINUS  &kp NUMBER_6  &kp N7        &kp N8        &kp KP_NUMBER_9  &kp KP_NUMBER_0
&key_repeat  &none  &none                 &kp LC(LEFT)       &kp LC(RIGHT)   &none                                            &none                &none         &none         &none         &none            &none
&key_repeat  &none  &none                 &none              &none           &none              &key_repeat    &kp BACKSPACE  &none                &none         &none         &none         &none            &none
                                          &key_repeat        &key_repeat     &key_repeat        &kp SPACE      &kp EQUAL      &mo 2                &none         &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
